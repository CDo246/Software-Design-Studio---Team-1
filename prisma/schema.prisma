// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// yarn add -D prisma-erd-generator @mermaid-js/mermaid-cli
// npx prisma generate
// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  verificationCode String
  password         String
  passwordSalt     String
  sessions         Session[]
  role             String // 'examiner', 'student', 'admin' TODO: Delete

  student  Student?
  examiner Examiner?
}

model Student {
  id               String        @id @default(cuid())
  studentId        String        @unique
  verificationCode String        @default("")
  imageBase64      String?
  userId           String?       @unique //UserID for identity verification
  user             User?         @relation(fields: [userId], references: [id])
  sessions         ExamSession[]
}

model Examiner {
  id              String           @id @default(cuid())
  examinerId      String           @unique
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  createdSessions CreatedSession[]
}

model CreatedSession {
  id         String        @id @default(cuid())
  uniqueCode String        @unique
  examinerId String
  valid      Boolean       @default(true)
  examiner   Examiner      @relation(fields: [examinerId], references: [id])
  sessions   ExamSession[]

  @@unique([uniqueCode, examinerId])
}

model ExamSession {
  sessionId            String         @id @default(cuid())
  seatNumber           String
  startTime            DateTime
  endTime              DateTime?
  faceImage            String? //String for capturing the user's face (and comparing to saved face)
  deskAIApproved       Boolean        @default(false) //Do this if the user's desk has been approved by AI
  deskImage            String? //String for capturing an image of the user's desk for manual review if not AI approved
  liveFeedImage        String? //Yes, we're doing the live feed with ASCII-encoded images uploaded to an SQL database
  recordedVideo        String?
  deskManuallyApproved Boolean        @default(false)
  suspiciousActivity   Boolean        @default(false) // Field for tracking current suspicious activity
  strikes              Int            @default(0)
  manuallyFailed       Boolean        @default(false)
  notifications        Notification[]
  recordings           Recording[]
  studentId            String
  student              Student        @relation(fields: [studentId], references: [id])
  uniqueCode           String
  examinerId           String
  createdSession       CreatedSession @relation(fields: [uniqueCode, examinerId], references: [uniqueCode, examinerId])
}

// Notification that is sent to examiner/admin (could contain `content` such as `student X is suspicious`)
// Has relations to User as well as Exam Session due to convenience of saving all notifications for a particular user.
model Notification {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  sessionId String
  exam      ExamSession @relation(fields: [sessionId], references: [sessionId])
}

// Image stored per student for facial recognition purpose.
model Image {
  id   String @id @default(cuid())
  name String
  data Bytes // Binary image data (i.e. png)
  // Student Student[]
}

// Video recording of a specific Exam Session (which is transitively associated with a Student)
model Recording {
  id        String      @id @default(cuid())
  sessionId String
  data      Bytes // Binary video data (i.e. mp4)
  exam      ExamSession @relation(fields: [sessionId], references: [sessionId])
  createdAt DateTime    @default(now())
}
