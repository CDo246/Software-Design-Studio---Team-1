// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  passwordHash  String //  encrypted hash
  role          String // 'examiner', 'student', 'admin'
  Student       Student?
  Examiner      Examiner?
}

model Student {
  id        Int           @id @default(autoincrement())
  studentId Int           @unique
  userId    Int           @unique
  imageId   Int
  picture   Image         @relation(fields: [imageId], references: [id])
  isA       User          @relation(fields: [userId], references: [id])
  sessions  ExamSession[]
}

model Examiner {
  id         Int           @id @default(autoincrement())
  examinerId Int         @unique
  userId     Int           @unique
  user       User          @relation(fields: [userId], references: [id])
  sessions   ExamSession[]
}

// Structure to track each exam session created by a student, if there was any suspicious activity, and store list of any notifications or recordings.
model ExamSession {
  sessionId          Int            @id @default(autoincrement())
  seatNumber         Int
  startTime          DateTime
  endTime            DateTime?
  suspiciousActivity Boolean        @default(false) // Field for tracking suspicious activity
  Notification       Notification[]
  Recording          Recording[]
  studentId          Int
  student            Student        @relation(fields: [studentId], references: [id])
  examinerId         Int
  examiner           Examiner       @relation(fields: [examinerId], references: [id])
}

// Notification that is sent to examiner/admin (could contain `content` such as `student X is suspicious`)
// Has relations to User as well as Exam Session due to convenience of saving all notifications for a particular user.
model Notification {
  id        Int         @id @default(autoincrement())
  content   String
  createdAt DateTime    @default(now())
  sessionId Int
  exam      ExamSession @relation(fields: [sessionId], references: [sessionId])
}

// Image stored per student for facial recognition purpose.
model Image {
  id      Int       @id @default(autoincrement())
  name    String
  data    Bytes // Binary image data (i.e. png)
  Student Student[]
}

// Video recording of a specific Exam Session (which is transitively associated with a Student)
model Recording {
  id        Int         @id @default(autoincrement())
  sessionId Int
  data      Bytes // Binary video data (i.e. mp4)
  exam      ExamSession @relation(fields: [sessionId], references: [sessionId])
  createdAt DateTime    @default(now())
}
