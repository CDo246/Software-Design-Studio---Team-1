// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// yarn add -D prisma-erd-generator @mermaid-js/mermaid-cli
// npx prisma generate
// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  verificationCode String
  password         String
  passwordSalt     String
  accounts         Account[]
  sessions         Session[]
  role             String // 'examiner', 'student', 'admin'
  student          Student?
  examiner         Examiner?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id        String        @id @default(cuid())
  studentId Int           @unique
  userId    String        @unique
  // imageId   Int
  // picture   Image         @relation(fields: [imageId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  sessions  ExamSession[]
}

model Examiner {
  id              String           @id @default(cuid())
  examinerId      Int              @unique
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  createdSessions CreatedSession[]
}

model CreatedSession {
  id         String        @id @default(cuid())
  uniqueCode Int           @unique
  examinerId String
  valid      Boolean       @default(true)
  examiner   Examiner      @relation(fields: [examinerId], references: [id])
  sessions   ExamSession[]

  @@unique([uniqueCode, examinerId])
}

model ExamSession {
  sessionId          String         @id @default(cuid())
  seatNumber         String
  startTime          DateTime
  endTime            DateTime?
  suspiciousActivity Boolean        @default(false) // Field for tracking suspicious activity
  notifications      Notification[]
  recordings         Recording[]
  studentId          String
  student            Student        @relation(fields: [studentId], references: [id])
  uniqueCode         Int
  examinerId         String
  createdSession     CreatedSession @relation(fields: [uniqueCode, examinerId], references: [uniqueCode, examinerId])
}

// Notification that is sent to examiner/admin (could contain `content` such as `student X is suspicious`)
// Has relations to User as well as Exam Session due to convenience of saving all notifications for a particular user.
model Notification {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  sessionId String
  exam      ExamSession @relation(fields: [sessionId], references: [sessionId])
}

// Image stored per student for facial recognition purpose.
model Image {
  id   String @id @default(cuid())
  name String
  data Bytes // Binary image data (i.e. png)
  // Student Student[]
}

// Video recording of a specific Exam Session (which is transitively associated with a Student)
model Recording {
  id        String      @id @default(cuid())
  sessionId String
  data      Bytes // Binary video data (i.e. mp4)
  exam      ExamSession @relation(fields: [sessionId], references: [sessionId])
  createdAt DateTime    @default(now())
}
